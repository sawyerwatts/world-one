// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: era.sql

package db

import (
	"context"
)

const getCurrEra = `-- name: GetCurrEra :one
select id, name, start_time, end_time, create_time, update_time
from eras
where end_time = '2200/1/1'
`

func (q *Queries) GetCurrEra(ctx context.Context) (Era, error) {
	row := q.db.QueryRow(ctx, getCurrEra)
	var i Era
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartTime,
		&i.EndTime,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getEras = `-- name: GetEras :many
select id, name, start_time, end_time, create_time, update_time
from eras
`

func (q *Queries) GetEras(ctx context.Context) ([]Era, error) {
	rows, err := q.db.Query(ctx, getEras)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Era
	for rows.Next() {
		var i Era
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartTime,
			&i.EndTime,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
